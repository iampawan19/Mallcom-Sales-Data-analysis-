# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13qYDTODPaQTzrDJUcmNB5XtNFMKABbRj
"""

import pandas as pd
import matplotlib.pyplot as plt

# Replace 'file_path.csv' with the path to your CSV file
file_path = '/content/Data for Assignament.csv'

# Read CSV file into DataFrame, specifying the encoding
df = pd.read_csv(file_path, encoding='latin1')

# Display the DataFrame
print(df)

# Rename the column 'DD/MM/YYYY' to 'date'
df.rename(columns={'DD/MM/YYYY': 'date'}, inplace=True)

# Display the DataFrame
print(df)

# Convert 'date' column to datetime format
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Find the minimum and maximum dates
min_date = df['date'].min()
max_date = df['date'].max()

# Display the results
print("Minimum date:", min_date)
print("Maximum date:", max_date)

# Print all column names
print(df.columns)

"""**Total sales over time.**"""

# Convert 'date' column to datetime format if not already done
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Extract year from the 'date' column
df['year'] = df['date'].dt.year

# Group by year and sum up the sales
total_sales_by_year = df.groupby('year')[' Realisation Amount '].sum()

# Print the total sales by year
print(total_sales_by_year)

import matplotlib.pyplot as plt

# Group by region and sum up the quantities sold
total_quantity_by_region = df.groupby('REGION')['QUANTITY'].sum()

# Plotting
plt.figure(figsize=(12, 6))
total_quantity_by_region.plot(kind='bar', color='lightgreen')
plt.title('Total Quantity by Region')
plt.xlabel('Region')
plt.ylabel('Total Quantity')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""**Sales distribution by top 5 region, product category**"""

# Group by region and sum up the sales
total_sales_by_region = df.groupby('REGION')[' Realisation Amount '].sum()

# Sort the regions based on total sales and get the top five
top_five_regions = total_sales_by_region.sort_values(ascending=False).head(5)

# Display the top five regions
print(top_five_regions)

# Group by region and sum up the sales
total_sales_by_region = df.groupby('REGION')[' Realisation Amount '].sum()

# Sort the regions based on total sales and get the top five
top_five_regions = total_sales_by_region.sort_values(ascending=False).head(5)

# Create a bar plot
plt.figure(figsize=(10, 6))
top_five_regions.plot(kind='bar', color='skyblue')
plt.title('Top Five Regions by Total Sales')
plt.xlabel('Region')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""**Identify top-selling products by quantity.**"""

# Group by product category and sum up the quantities sold
total_quantity_by_product = df.groupby('PRODUCT')['QUANTITY'].sum()

# Sort the products based on total quantity sold and get the top 5 selling products
top_5_selling_products_by_quantity = total_quantity_by_product.sort_values(ascending=False).head(5)

# Display the top 5 selling products based on quantity sold
print("Top 5 selling products based on quantity sold:")
print(top_5_selling_products_by_quantity)

# Group by product category and sum up the quantities sold
total_quantity_by_product = df.groupby('PRODUCT')['QUANTITY'].sum()

# Sort the products based on total quantity sold and get the top 5 selling products
top_5_selling_products_by_quantity = total_quantity_by_product.sort_values(ascending=False).head(5)

# Create a bar plot
plt.figure(figsize=(10, 6))
top_5_selling_products_by_quantity.plot(kind='bar', color='lightgreen')
plt.title('Top 5 Selling Products Based on Quantity Sold')
plt.xlabel('Product')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""**Order frequency analysis by date**"""

# Convert 'date' column to datetime format if not already done
df['date'] = pd.to_datetime(df['date'], errors='coerce')

# Extract month from the 'date' column
df['month'] = df['date'].dt.month

# Group by month and count the number of orders
order_frequency_by_month = df.groupby('month').size()

# Display the order frequency analysis by month
print("Order frequency analysis by month:")
print(order_frequency_by_month)

# Plotting
plt.figure(figsize=(10, 6))
order_frequency_by_month.plot(kind='barh', color='lightcoral')
plt.title('Order Frequency Analysis by Month')
plt.xlabel('Number of Orders')
plt.ylabel('Month')
plt.yticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.grid(axis='x', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""**Most popular products**"""

# Group by product and sum up the quantities sold
total_quantity_by_product = df.groupby('PRODUCT')['QUANTITY'].sum()

# Sort the products based on total quantity sold and get the most popular products
most_popular_products = total_quantity_by_product.sort_values(ascending=False)

# Display the most popular products
print("Most popular products:")
print(most_popular_products)

import matplotlib.pyplot as plt

# Group by product and sum up the quantities sold
total_quantity_by_product = df.groupby('PRODUCT')['QUANTITY'].sum()

# Sort the products based on total quantity sold and get the most popular products
most_popular_products = total_quantity_by_product.sort_values(ascending=False)

# Plotting
plt.figure(figsize=(8, 8))
most_popular_products.plot(kind='pie', autopct='%1.1f%%', startangle=140)
plt.title('Most Popular Products')
plt.ylabel('')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.tight_layout()
plt.show()

"""**Ordered most by website**"""

# Group by website and count the number of orders
orders_by_website = df.groupby('WEBSITE').size()

# Find the website with the most orders
most_ordered_website = orders_by_website.idxmax()

# Display the website with the most orders
print("Website with the most orders:", most_ordered_website)

"""**Ordered most by Plartform**"""

# Group by business type (Platform Type) and count the number of orders
orders_by_business_type = df.groupby('Platform Type').size()

# Find the business type with the most orders
most_ordered_business_type = orders_by_business_type.idxmax()

# Display the business type with the most orders
print("Business type with the most orders:", most_ordered_business_type)

# Count the total occurrences of each status
status_counts = df['STATUS'].value_counts()

# Display the total count of each status
for status, count in status_counts.items():
    print(f"{status}: {count}")

import matplotlib.pyplot as plt

# Count the total occurrences of each status
status_counts = df['STATUS'].value_counts()

# Plotting
plt.figure(figsize=(8, 8))
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=140)
plt.title('Total Count of Each Status')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.tight_layout()
plt.show()